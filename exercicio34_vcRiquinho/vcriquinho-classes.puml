@startuml VcRiquinho

' Estilos
skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam classFontStyle bold

' Classe principal do sistema
class VcRiquinho {
    - clientes: List<Cliente>
    - produtos: List<Investimento>
    - scanner: Scanner
    + VcRiquinho()
    + executar(): void
    - exibirMenu(): void
    - cadastrarCliente(): void
    - listarClientes(): void
    - cadastrarProduto(): void
    - listarProdutos(): void
    - simularRendimento(): void
    + main(args: String[]): void
}

' Hierarquia de Clientes
abstract class Cliente {
    # nome: String
    # email: String
    # contas: List<Conta>
    + Cliente(nome: String, email: String)
    + {abstract} getDocumento(): String
    + {abstract} getTaxaInvestimentoAutomatico(): double
    + adicionarConta(conta: Conta): void
    + removerConta(conta: Conta): void
    + getContas(): List<Conta>
    + getNome(): String
    + getEmail(): String
    + setNome(nome: String): void
    + setEmail(email: String): void
    + toString(): String
}

class PessoaFisica {
    - cpf: String
    + PessoaFisica(nome: String, email: String, cpf: String)
    + getDocumento(): String
    + getTaxaInvestimentoAutomatico(): double
    + getCpf(): String
    + setCpf(cpf: String): void
    + toString(): String
}

class PessoaJuridica {
    - cnpj: String
    + PessoaJuridica(nome: String, email: String, cnpj: String)
    + getDocumento(): String
    + getTaxaInvestimentoAutomatico(): double
    + getCnpj(): String
    + setCnpj(cnpj: String): void
    + toString(): String
}

' Hierarquia de Contas
abstract class Conta {
    # numero: String
    # saldo: double
    # titular: Cliente
    + Conta(numero: String, titular: Cliente)
    + {abstract} calcularRendimento(dias: int): double
    + {abstract} calcularTaxaServico(rendimento: double): double
    + depositar(valor: double): void
    + sacar(valor: double): void
    + getSaldo(): double
    + getNumero(): String
    + getTitular(): Cliente
    + setSaldo(saldo: double): void
    + toString(): String
}

class ContaCorrente {
    + ContaCorrente(numero: String, titular: Cliente)
    + calcularRendimento(dias: int): double
    + calcularTaxaServico(rendimento: double): double
}

class ContaCDI {
    - TAXA_CDI_DIARIA: double
    - TAXA_SERVICO: double
    + ContaCDI(numero: String, titular: Cliente)
    + calcularRendimento(dias: int): double
    + calcularTaxaServico(rendimento: double): double
}

class ContaInvestimentoAutomatico {
    - investimentos: List<Investimento>
    + ContaInvestimentoAutomatico(numero: String, titular: Cliente)
    + adicionarInvestimento(investimento: Investimento): void
    + calcularRendimento(dias: int): double
    + calcularTaxaServico(rendimento: double): double
    + getInvestimentos(): List<Investimento>
}

' Hierarquia de Investimentos
abstract class Investimento {
    # nome: String
    # descricao: String
    # valorInvestido: double
    + Investimento(nome: String, descricao: String, valorInvestido: double)
    + {abstract} calcularRendimento(dias: int): double
    + {abstract} podeSerResgatado(dias: int): boolean
    + getNome(): String
    + getDescricao(): String
    + getValorInvestido(): double
    + setNome(nome: String): void
    + setDescricao(descricao: String): void
    + setValorInvestido(valorInvestido: double): void
    + toString(): String
}

class InvestimentoRendaFixa {
    - rendimentoMensal: double
    - periodoCarencia: int
    + InvestimentoRendaFixa(nome: String, descricao: String, valorInvestido: double, rendimentoMensal: double, periodoCarencia: int)
    + calcularRendimento(dias: int): double
    + podeSerResgatado(dias: int): boolean
    + getRendimentoMensal(): double
    + getPeriodoCarencia(): int
    + setRendimentoMensal(rendimentoMensal: double): void
    + setPeriodoCarencia(periodoCarencia: int): void
}

class InvestimentoRendaVariavel {
    - rendimentoMensalEsperado: double
    + InvestimentoRendaVariavel(nome: String, descricao: String, valorInvestido: double, rendimentoMensalEsperado: double)
    + calcularRendimento(dias: int): double
    + podeSerResgatado(dias: int): boolean
    + getRendimentoMensalEsperado(): double
    + setRendimentoMensalEsperado(rendimentoMensalEsperado: double): void
}

' Relacionamentos
VcRiquinho ||--o{ Cliente : gerencia
VcRiquinho ||--o{ Investimento : gerencia

Cliente ||--o{ Conta : possui
Cliente <|-- PessoaFisica
Cliente <|-- PessoaJuridica

Conta ||--o{ Cliente : pertence
Conta <|-- ContaCorrente
Conta <|-- ContaCDI
Conta <|-- ContaInvestimentoAutomatico

ContaInvestimentoAutomatico ||--o{ Investimento : contÃ©m

Investimento <|-- InvestimentoRendaFixa
Investimento <|-- InvestimentoRendaVariavel

@enduml
